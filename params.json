{"name":"Prodometer / AutomaDeD","tagline":"Debugging Tool based on Statistical Analysis","body":"Prodometer is an advanced automated debugging technique based on AutomaDeD infrastructure. \r\n\r\nFor more information about the technique and algorithms, please refer to Prodometer paper [1] {http://dl.acm.org/citation.cfm?id=2594336}\r\n\r\nThe original code is hosted at: https://github.com/scalability-llnl/AutomaDeD\r\n\r\n### Description\r\n\r\nAutomaDeD (Automata-based Debugging for Dissimilar parallel tasks) is a tool for automatic diagnosis of performance and correctness problems in MPI applications. It creates control-flow models of each MPI process and, when a failure occurs, these models are leveraged to find the origin of problems automatically. MPI calls are intercepted (using wrappers) to create the models. When an MPI application hangs, AutomaDeD creates a progress-dependence graph that helps finding the process (or group of processes) that caused the hang. Please refer to [1, 2] for more details.\r\n\r\n### Building\r\n\r\nFor Unix-based machines (with Cmake), simply execute:\r\n\r\n$ cmake -DCMAKE_INSTALL_PREFIX=\"install_path\"\r\n\r\nTo use callpath library(to normalize the library loading order):\r\n\r\n$ cmake -DCMAKE_INSTALL_PREFIX=\"install_path\" -DSTATE_TRACKER_WITH_CALLPATH=ON\r\n\r\nThis will require two additional libraries \"callpath\" and \"adept_utils\". You can get those from the following link: https://github.com/scalability-llnl.\r\n\r\nThen:\r\n\r\n make; make install;\r\n\r\nIt requires a C++ MPI compiler wrapper (like mpic++) The configure script should detect automatically your MPI compiler installation. If you want to specify a particular compiler, it can be done standard CMake techniques.\r\n\r\nBOOST should be installed in your system. CMake will try to detect boost in your system. To set the path for BOOST for CMake to find, please use: -D BOOST_ROOT=\"boost installation path\"\r\n### Running\r\n\r\nYou have to link your MPI application against AutomaDeD's library. This could be done using either the static or the shared library. Once this is done, you can run your buggy application. You can use LD_PRELOAD=/lib/libstracker.so srun -n 16 -ppdebug ./test to run test application.\r\n\r\nTake a look at the './example' directory to see some use cases.\r\n\r\nTo run with callpath library, please set env variable: AUT_USE_CALL_PATH=TRUE\r\n\r\nYou can stop dumping the tool output file using: export AUT_DO_NOT_DUMP=TRUE\r\n\r\nIf you choose to attach other debuggers on the LP process identified by the tool, you can use: export AUT_DO_NOT_EXIT=TRUE, to make sure the tool does not exit\r\n4. About BG/Q systems\r\n\r\nFor BG/Q system, you need to specify Toolchain file for CMake: -D CMAKE_TOOLCHAIN_FILE=cmakemodules/Toolchain/BlueGeneQ-gnu.cmake\r\n\r\n### Using the GUI\r\n\r\nAutomaDeD comes with a GUI which can read the AUT* file generated by the tool. The GUI, has a documentation file which explains how to use the GUI.\r\n### Known issues\r\n\r\nIf callpath is used, currently it does not give the full file name and line number information in the output file. So GUI can not be used. This support will be added soon.\r\n### References\r\n\r\n[1] Subrata Mitra, Ignacio Laguna, Dong H. Ahn, Saurabh Bagchi, Martin Schulz, Todd Gamblin, Accurate application progress analysis for large-scale parallel debugging, ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2014.\r\n\r\n[2] Ignacio Laguna, Dong H. Ahn, Bronis R. de Supinski, Saurabh Bagchi, Todd Gamblin, Probabilistic Diagnosis of Performance Faults in Large-Scale Parallel Applications, International Conference on Parallel Architectures and Compilation Techniques (PACT), 2012.\r\n\r\n[3] Ignacio Laguna, Todd Gamblin, Bronis R. de Supinski, Saurabh Bagchi, Greg Bronevetsky, Dong H. Ahn, Martin Schulz, Barry Rountree, \"Large Scale Debugging of Parallel Tasks with AutomaDeD, ACM/IEEE Conference for High Performance Computing, Networking, Storage and Analysis (SC), Seattle, WA, Nov 2011.\r\n\r\n[4] Greg Bronevetsky, Ignacio Laguna, Surabh Bagchi, Bronis R. de Supinski, Dong H. Ahn, Martin Schulz, AutomaDeD: Automata-Based Debugging for Dissimilar Parallel Tasks, IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Chicago Illinois, Jun-Jul, 2010.\r\n\r\n[5] Science & Technolofy Review, Supercomputing Tools Speed Simulations, July, 2014.\r\nAuthors\r\n\r\nThe code infrastructure of AutomaDeD was written by:\r\nIgnacio Laguna (ilaguna@llnl.gov), LLNL\r\n\r\nThe code that implements the Prodometer algorithm was written by:\r\nSubrata Mitra (mitra4@purdue.edu), Purdue University\r\n\r\nProject contributors:\r\nDong H. Ahn (LLNL)\r\nSaurabh Bagchi (Purdue University)\r\nBronis R. de Supinski (LLNL)\r\nTodd Gamblin (LLNL)\r\nMartin Schulz (LLNL)\r\nGreg Bronevetsky ","google":"UA-55060803-1","note":"Don't delete this file! It's used internally to help with page regeneration."}